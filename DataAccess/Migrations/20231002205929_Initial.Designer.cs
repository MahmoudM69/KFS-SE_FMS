// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231002205929_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataAccess.Models.EstablishmentModels.Establishment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRecoverable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SoftDelete")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Establishments");
                });

            modelBuilder.Entity("DataAccess.Models.EstablishmentModels.EstablishmentImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRecoverable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SoftDelete")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("EstablishmentImages");
                });

            modelBuilder.Entity("DataAccess.Models.EstablishmentModels.EstablishmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRecoverable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SoftDelete")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EstablishmentTypes");
                });

            modelBuilder.Entity("DataAccess.Models.FinancialAidModels.FinancialAid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AidAmount")
                        .HasColumnType("double");

                    b.Property<double>("AidPercentage")
                        .HasColumnType("double");

                    b.Property<double>("Budget")
                        .HasColumnType("double");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRecoverable")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("MaxBalance")
                        .HasColumnType("double");

                    b.Property<double>("MinBalance")
                        .HasColumnType("double");

                    b.Property<int>("SoftDelete")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("FinancialAids");
                });

            modelBuilder.Entity("DataAccess.Models.OrderModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("int");

                    b.Property<int>("Establishment_ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("FinancialAidId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRecoverable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("SoftDelete")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EstablishmentId");

                    b.HasIndex("Establishment_ProductId");

                    b.HasIndex("FinancialAidId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DataAccess.Models.PaymentModels.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRecoverable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PaymentServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SoftDelete")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.HasIndex("PaymentServiceId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DataAccess.Models.PaymentModels.PaymentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Fee")
                        .HasColumnType("double");

                    b.Property<double>("FeePercentage")
                        .HasColumnType("double");

                    b.Property<bool>("IsRecoverable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SoftDelete")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentServices");
                });

            modelBuilder.Entity("DataAccess.Models.ProductModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRecoverable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SoftDelete")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DataAccess.Models.ProductModels.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRecoverable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SoftDelete")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("DataAccess.Models.ProductModels.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRecoverable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SoftDelete")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("DataAccess.Models.SharedModels.Establishment_Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AidAmount")
                        .HasColumnType("double");

                    b.Property<double>("AidPercentage")
                        .HasColumnType("double");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRecoverable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("double");

                    b.Property<float>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("RetailPrice")
                        .HasColumnType("double");

                    b.Property<int>("SoftDelete")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("Establishment_Products");
                });

            modelBuilder.Entity("DataAccess.Models.SharedModels.ProductType_FinancialAid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAidId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRecoverable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SoftDelete")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.HasIndex("FinancialAidId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductType_FinancialAids");
                });

            modelBuilder.Entity("DataAccess.Models.UserModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecoverable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Salary")
                        .HasColumnType("double");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int>("SoftDelete")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EstablishmentEstablishmentType", b =>
                {
                    b.Property<int>("EstablishmentTypesId")
                        .HasColumnType("int");

                    b.Property<int>("EstablishmentsId")
                        .HasColumnType("int");

                    b.HasKey("EstablishmentTypesId", "EstablishmentsId");

                    b.HasIndex("EstablishmentsId");

                    b.ToTable("EstablishmentEstablishmentType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductProductType", b =>
                {
                    b.Property<int>("ProductTypesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("ProductTypesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductProductType");
                });

            modelBuilder.Entity("DataAccess.Models.UserModels.CustomerModels.Customer", b =>
                {
                    b.HasBaseType("DataAccess.Models.UserModels.ApplicationUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.UserModels.EmployeeModels.Employee", b =>
                {
                    b.HasBaseType("DataAccess.Models.UserModels.ApplicationUser");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkingSince")
                        .HasColumnType("datetime(6)");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.EstablishmentModels.EstablishmentImage", b =>
                {
                    b.HasOne("DataAccess.Models.EstablishmentModels.Establishment", "Establishment")
                        .WithMany("EstablishmentImages")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("DataAccess.Models.FinancialAidModels.FinancialAid", b =>
                {
                    b.HasOne("DataAccess.Models.EstablishmentModels.Establishment", "Establishment")
                        .WithMany("FinancialAids")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("DataAccess.Models.OrderModels.Order", b =>
                {
                    b.HasOne("DataAccess.Models.UserModels.CustomerModels.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.EstablishmentModels.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.SharedModels.Establishment_Product", "Establishment_Product")
                        .WithMany("Orders")
                        .HasForeignKey("Establishment_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.FinancialAidModels.FinancialAid", "FinancialAid")
                        .WithMany("Orders")
                        .HasForeignKey("FinancialAidId");

                    b.HasOne("DataAccess.Models.PaymentModels.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId");

                    b.Navigation("Customer");

                    b.Navigation("Establishment");

                    b.Navigation("Establishment_Product");

                    b.Navigation("FinancialAid");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("DataAccess.Models.PaymentModels.Payment", b =>
                {
                    b.HasOne("DataAccess.Models.EstablishmentModels.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.PaymentModels.PaymentService", "PaymentService")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");

                    b.Navigation("PaymentService");
                });

            modelBuilder.Entity("DataAccess.Models.ProductModels.ProductImage", b =>
                {
                    b.HasOne("DataAccess.Models.ProductModels.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccess.Models.SharedModels.Establishment_Product", b =>
                {
                    b.HasOne("DataAccess.Models.EstablishmentModels.Establishment", "Establishment")
                        .WithMany("Establishment_Products")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.ProductModels.Product", "Product")
                        .WithMany("Establishment_Products")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccess.Models.SharedModels.ProductType_FinancialAid", b =>
                {
                    b.HasOne("DataAccess.Models.EstablishmentModels.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.FinancialAidModels.FinancialAid", "FinancialAid")
                        .WithMany("ProductType_FinancialAids")
                        .HasForeignKey("FinancialAidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.ProductModels.ProductType", "ProductType")
                        .WithMany("ProductType_FinancialAids")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");

                    b.Navigation("FinancialAid");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("EstablishmentEstablishmentType", b =>
                {
                    b.HasOne("DataAccess.Models.EstablishmentModels.EstablishmentType", null)
                        .WithMany()
                        .HasForeignKey("EstablishmentTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.EstablishmentModels.Establishment", null)
                        .WithMany()
                        .HasForeignKey("EstablishmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccess.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccess.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccess.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProductType", b =>
                {
                    b.HasOne("DataAccess.Models.ProductModels.ProductType", null)
                        .WithMany()
                        .HasForeignKey("ProductTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.ProductModels.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.UserModels.CustomerModels.Customer", b =>
                {
                    b.HasOne("DataAccess.Models.UserModels.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Models.UserModels.CustomerModels.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.UserModels.EmployeeModels.Employee", b =>
                {
                    b.HasOne("DataAccess.Models.EstablishmentModels.Establishment", "Establishment")
                        .WithMany("Employees")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.UserModels.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("DataAccess.Models.UserModels.EmployeeModels.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("DataAccess.Models.EstablishmentModels.Establishment", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("EstablishmentImages");

                    b.Navigation("Establishment_Products");

                    b.Navigation("FinancialAids");
                });

            modelBuilder.Entity("DataAccess.Models.FinancialAidModels.FinancialAid", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductType_FinancialAids");
                });

            modelBuilder.Entity("DataAccess.Models.PaymentModels.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DataAccess.Models.PaymentModels.PaymentService", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DataAccess.Models.ProductModels.Product", b =>
                {
                    b.Navigation("Establishment_Products");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("DataAccess.Models.ProductModels.ProductType", b =>
                {
                    b.Navigation("ProductType_FinancialAids");
                });

            modelBuilder.Entity("DataAccess.Models.SharedModels.Establishment_Product", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DataAccess.Models.UserModels.CustomerModels.Customer", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
