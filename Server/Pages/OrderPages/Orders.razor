@page "/Orders"
@using Business.IRepository.IApplicationUserRepositories.ICustomerRepositories
@using Business.IRepository.IFinancialAidRepositories
@using Business.IRepository.IOrderRepositories
@using Business.IRepository.IPaymentRepositories
@using Business.IRepository.ISharedRepository
@using DataAcesss.Data.CustomerModels
@using DataAcesss.Data.FinancialAidModels
@using DataAcesss.Data.OrderModels
@using DataAcesss.Data.PaymentModels
@using DataAcesss.Data.Shared
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> userManager
@inject IOrderRepository OrderRepository
@inject ICustomerRepository CustomerRepository
@inject IFinancialAidRepository FinancialAidRepository
@inject IPaymentRepository PaymentRepository
@inject IPaymentServiceRepository PaymentServiceRepository
@attribute [Authorize(Roles ="Customer")]


<h3>Orders</h3>

<div style="overflow:auto;">
    <table class="table table-bordered table-striped table-hover mb-0">
        <thead>
            <tr>
                <th>ID</th>
                <th>Product</th>
                <th>Description</th>
                <th>Price</th>
                <th>Order Info</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody class="table table-bordered table-striped table-hover">
            @if (Models != null && Models.Any())
            {
                foreach(Model model in Models)
                {
                    //establishment_Product = establishment_ProductRepository.GetEstablishment_Product(order.Establishment_ProductId.Value).GetAwaiter().GetResult();
                    <tr>
                        <td>@model.Order.OrderId</td>
                        <td>@model.Order.Establishment_Product.Product.ProductName</td>
                        <td>@model.Order.Establishment_Product.Product.ProductDescription</td>
                        <td>@model.Order.Total.ToString("c")</td>
                        @if(model.Order.Stats == "pending")
                        {
                            <div style="overflow:auto">
                                <EditForm Model="model" OnValidSubmit="()=> Submit(model)">
                                    <DataAnnotationsValidator/>
                                    <td>
                                        <InputNumber @bind-Value="@model.Order.Quantity" min="0" max="@model.Order.Establishment_Product.Quantity" class="form-control" placeholder="Quantity" title="Quantity" style="width: 100px;" reqired></InputNumber>
                                    </td>
                                    <td>
                                        <InputSelect @bind-Value="@model.Order.FinancialAidId" class="form-control" title="Financial Aid" style="width: 135px;" reqired>
                                            <option value="0" selected>Financial Aid</option>
                                            @if (model.FinancialAids != null && model.FinancialAids.Any())
                                            {
                                                @foreach (var financialAid in model.FinancialAids)
                                                {
                                                    <option value="@financialAid.FinancialAidId">@financialAid.AidAmount @if(financialAid.Percentage){<span>%</span>}</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value="" disabled>No Financail Aid for this product</option>
                                            }
                                        </InputSelect>
                                    </td>
                                    <td>
                                        <InputSelect @bind-Value="model.Payment.PaymentServiceId" class="form-control" title="Payment Service" style="width: 135px;" reqired>
                                            <option value="" disabled selected>Payment Service</option>
                                            @if (model.PaymentServices != null && model.PaymentServices.Any())
                                            {
                                                @foreach (var PaymentService in model.PaymentServices)
                                                {
                                                    <option value="@PaymentService.PaymentServiceId">@PaymentService.PaymentServiceName > @PaymentService.PaymentServiceFee @if(PaymentService.Percentage){<span>%</span>}</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value="" disabled>No Payment Services available</option>
                                            }
                                        </InputSelect>
                                    </td>
                                    <td>
                                        <button type="submit" class="btn btn-success" title="Confirm">Y</button>
                                        <button type="reset" class="btn btn-primary" title="Reset">R</button>
                                        <button @onclick="()=>Delete(model.Order.OrderId)" class="btn btn-danger" title="Cancel">N</button>
                                    </td>
                                </EditForm>
                            </div>
                        }
                        else
                        {
                            <td>
                                <td title="Quantity">@model.Order.Quantity</td>
                                @if(model.Order.FinancialAid != null)
                                {
                                    <td title="Financial Aid">@model.Order.FinancialAid.AidAmount @if(model.Order.FinancialAid.Percentage){<span>%</span>}</td>
                                }else
                                {
                                    <td title="Financial Aid">No Financial Aid</td>
                                }
                                <td title="Payment Service">@model.Payment.PaymentService.PaymentServiceName > @model.Payment.PaymentService.PaymentServiceFee @if(model.Payment.PaymentService.Percentage){<span>%</span>}</td>
                                <td><button @onclick="()=>Canacel(model)" class="btn btn-danger" title="Cancel">Cancel</button></td>
                            </td>
                        }
                        @{

                            model.Payment.Total = model.Order.Quantity == 0 ? 0 : (model.Order.Total / (decimal)(model.Order.Establishment_Product.Quantity / model.Order.Quantity));
                            if(model.Order.FinancialAidId > 0 && model.Order.FinancialAidId != null && model.Payment.Total > 0)
                            {
                                FinancialAid financialAid = model.FinancialAids.FirstOrDefault(x => x.FinancialAidId == model.Order.FinancialAidId);
                                model.Payment.Total = model.Payment.Total - (financialAid.Percentage ? (model.Payment.Total * (financialAid.AidAmount / 100)) : financialAid.AidAmount);
                            }
                            if(model.Payment.Total < 0)
                            {
                                model.Payment.Total = model.Order.Quantity == 0 ? 0 : (model.Order.Total / (decimal)(model.Order.Establishment_Product.Quantity / model.Order.Quantity));
                            }
                            if(model.Payment.PaymentServiceId != null && model.Payment.Total > 0)
                            {
                                PaymentService paymentService = model.PaymentServices.FirstOrDefault(x => x.PaymentServiceId == model.Payment.PaymentServiceId);
                                model.Order.Payment.Total = model.Order.Payment.Total + (paymentService.Percentage ? (model.Order.Payment.Total * (paymentService.PaymentServiceFee / 100)) : paymentService.PaymentServiceFee);   
                            }
                        }
                        <td>@model.Order.Payment.Total.ToString("c")</td>
                    </tr>
                }

            }
            else
            {
                <tr>There are no orders to show</tr>
            }
        </tbody>
    </table>
</div>

@code {
    public decimal Total { get; set; }
    public List<Model> Models { get; set; } = new();
    public List<Order> OrderList { get; set; }
    public List<FinancialAid> FinancialAids { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = AuthenticationStateProvider.GetAuthenticationStateAsync().GetAwaiter().GetResult().User;
        string customerId = userManager.GetUserId(user);
        OrderList = await OrderRepository.GetAllCustomerOrders(customerId);
        if(OrderList != null)
        {
            List<PaymentService> PaymentServices = await PaymentServiceRepository.GetAllPaymentServices();
            foreach(Order order in OrderList)
            {
                if(order.Stats == "pending")
                {
                    order.Payment = new Payment();
                    order.PaymentId = 0;
                    order.FinancialAidId = 0;
                    order.FinancialAid = null;
                    order.Quantity = 0;
                }
                Model model = new()
                {
                    Order = order,
                    PaymentId = order.PaymentId.Value,
                    Payment = order.Payment,
                    FinancialAidId = order.FinancialAidId.Value,
                    FinancialAids = await FinancialAidRepository.GetProductTypeFinancialAids(order.Establishment_Product.Product.ProductTypeId),
                    PaymentServices = PaymentServices
                };
                Models.Add(model);
            }
        }
    }
    private void Submit(Model model)
    {
        if (model.Order.Quantity <= 0 || model.Order.Payment.PaymentServiceId == null)
            return;
        model.Order.Payment.PaymentId = 0;
        Payment payment = model.Order.Payment;
        payment = PaymentRepository.CreatePayment(payment);
        model.Order.Stats = "Confirmed";
        model.Order.PaymentId = payment.PaymentId;
        model.Order = OrderRepository.UpdateOrder(model.Order);
        StateHasChanged();
    }
    private void Delete(int id)
    {
        OrderRepository.DeleteOrder(id);
        Models.Remove(Models.FirstOrDefault(x => x.Order.OrderId == id));
        StateHasChanged();
    }
    private void Canacel(Model model)
    {
        PaymentRepository.DeletePayment(model.Order.PaymentId.Value);
        model.Order.FinancialAid = null;
        model.Order.FinancialAidId = null;
        model.Order.Payment = new();
        model.Order.PaymentId = null;
        model.Order.Quantity = 0;
        model.Order.Stats = "pending";
        OrderRepository.UpdateOrder(model.Order);
        StateHasChanged();
    }
}
@code{
    public class Model
    {
        public Order Order { get; set; }
        public int PaymentId { get; set; }
        public Payment Payment { get; set; }
        public int FinancialAidId { get; set; }
        public List<FinancialAid> FinancialAids { get; set; }
        public int PaymentServiceId { get; set; }
        public List<PaymentService> PaymentServices { get; set; }
    }
}