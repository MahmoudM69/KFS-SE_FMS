@using DataAcesss.Data.Shared
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@inject RoleManager<IdentityRole> roleManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .product-image{
        display: block;
        width: 100%;
        height: 150px;
        background-size: cover !important;
        position: relative;
    }
</style>

<div class="card m-1 col-3" style="width: 18rem;">
    @*
    <div id="carouselExampleIndicators" class="carousel slide card-img-top" data-ride="carousel">
        @if(Imgs != null && Imgs.Any())
        {        
            @for(int i = 0; i < Imgs.Count(); i++)
            {
                <ol class="carousel-indicators">
                    <li data-target="#carouselExampleIndicators" data-slide-to="@i" class="active"></li>
                </ol>
                <div class="carousel-inner">
                    @if(i == 0)
                    {
                        <div class="carousel-item active">
                            <div class="product-image" style="background: url(@Imgs[i]) 50% 50%; "></div>
                            
                        </div>
                    }
                    else
                    {
                        <div class="carousel-item">
                          <img src="@Imgs[i]" class="d-block w-100" alt="Image @i">
                        </div>
                    }
                </div>
            }
        }
        <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
         <div class="product-image" style="background: url(@Img) 50% 50%; "></div>
    </div>*@
    <img src="@Img" class="d-block" style="width: 100%; height: 100%; object-fit: fill; overflow: hidden;" alt="Image">
   
    <div class="card-body">
        <h5 class="card-title">@Title</h5>
        <p class="card-text">@Description</p>
        @if(Type == "Establishment")
        {
            <a href="/ProductList/@Id" class="btn btn-primary col">View</a>
        }
        @if(ExpirationDate != null)
        {
            <p>@Total.Value.ToString("c")</p>
            @if (IsAuthenticated)
            {
                <button @onclick="@(() => Order.InvokeAsync(Id))" class="btn btn-primary col">Order</button>
            }else
            {
                <a href="/Identity/Account/Login" class="btn btn-primary col">Order</a>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<int> Order { get; set; }
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string Type { get; set; }
    [Parameter]
    public string Img { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string Description { get; set; }
    [Parameter]
    public decimal? RetailPrice { get; set; }
    [Parameter]
    public decimal? Total { get; set; }
    [Parameter]
    public bool? Percentage { get; set; }
    [Parameter]
    public decimal? AidAmount { get; set; }
    [Parameter]
    public DateTime? ExpirationDate { get; set; }
    private bool IsAuthenticated { get; set; }

    protected override Task OnParametersSetAsync()
    {
        IsAuthenticated = AuthenticationStateProvider.GetAuthenticationStateAsync().GetAwaiter().GetResult().User.Identity.IsAuthenticated;
        if(Img == "")
        {
            if(Type == "Establishment")
            {
                Img = ("Images/Shared/Establishment-Default-Image.png");
            }else if (Type == "Product")
            {
                Img = ("Images/Shared/Product-Default-Image.png");
            }else if (Type == "User")
            {
                Img = ("Images/Shared/User-Default-Image.jpg");
            }else
            {
                Img = ("Images/Shared/image-not-found.jpg");
            }
        }
        return base.OnParametersSetAsync();
    }
    
}
