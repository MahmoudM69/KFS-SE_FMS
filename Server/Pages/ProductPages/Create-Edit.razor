@page "/Product/Create"
@page "/Product/Edit/{id:int}"
@using Business.IRepository.IEstablishmentRepositories
@using Business.IRepository.IProductRepositories
@using Business.IRepository.ISharedRepository
@using System.IO
@using DataAcesss.Data.EstablishmentModels
@using DataAcesss.Data.ProductModels
@using DataAcesss.Data.Shared
@inject NavigationManager NavigationManager
@inject IProductRepository ProductRepository
@inject IProductTypeRepository ProductTypeRepository
@inject IEstablishmentRepository EstablishmentRepository
@inject IProductImageRepository ProductImageRepository
@inject IEstablishment_ProductRepository Establishment_ProductRepository
@inject IFileUploadRepository FileUploadRepository
@inject NavigationManager NavigationManager
<style>
    .product-image{
        display: block;
        width: 100%;
        height: 150px;
        background-size: cover !important;
        border: 3px solid green;
        position: relative;
    }
    .product-image-title{
        position:absolute;
        top:0;
        right:0;
        background-color:green;
        color:white;
        padding:0px 6px;
        display:inline-block;
    }
</style>
<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@title Product</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="product" OnValidSubmit="Submit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="form-group">
                        <label>Product Name</label>
                        <InputText @bind-Value="product.ProductName" class="form-control"></InputText>
                        <ValidationMessage For="() => product.ProductName"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Product Description</label>
                        <InputTextArea @bind-Value="product.ProductDescription" class="form-control"></InputTextArea>
                        <ValidationMessage For="() => product.ProductDescription"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Product Types</label>
                        <InputSelect @bind-Value="product.ProductTypeId" class="form-control">
                            @if (productTypes != null && productTypes.Any())
                            {
                                <option value="" disabled selected>Choose Type</option>
                                foreach (var productType in productTypes)
                                {
                                    <option value="@productType.ProductTypeId">@productType.Type</option>
                                }

                            }
                            else
                            {
                                <option value="" disabled>No Product Type</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => product.ProductTypeId"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Establishments</label>
                        <InputSelect @bind-Value="establishment_Product.EstablishmentId" class="form-control">
                            @if (establishments != null && establishments.Any())
                            {
                                <option value="" disabled selected>Choose Establishment</option>
                                foreach (var establishment in establishments)
                                {
                                    <option value="@establishment.EstablishmentId">@establishment.EstablishmentName</option>
                                }

                            }
                            else
                            {
                                <option value="" disabled>No Establishments</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => establishment_Product.EstablishmentId"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Product Quantity</label>
                        <InputNumber @bind-Value="establishment_Product.Quantity" class="form-control"></InputNumber>
                        <ValidationMessage For="() => establishment_Product.Quantity"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Purchase Price</label>
                        <InputNumber @bind-Value="establishment_Product.PurchasePrice" class="form-control"></InputNumber>
                        <ValidationMessage For="() => establishment_Product.PurchasePrice"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Retail Price</label>
                        <InputNumber @bind-Value="establishment_Product.RetailPrice" class="form-control"></InputNumber>
                        <ValidationMessage For="() => establishment_Product.RetailPrice"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Aid Amount in %</label>
                        
                        <div class="row col-12">
                            <InputNumber @bind-Value="establishment_Product.AidAmount" class="form-control col-11"></InputNumber>
                            <InputCheckbox @bind-Value="establishment_Product.Percentage" class="form-control col-1"></InputCheckbox>
                        </div>
                        <ValidationMessage For="() => establishment_Product.AidAmount"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Production Date</label>
                        <InputDate @bind-Value="establishment_Product.ProductionDate" class="form-control"></InputDate>
                        <ValidationMessage For="() => establishment_Product.ProductionDate"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Expiration Date</label>
                        <InputDate @bind-Value="establishment_Product.ExpirationDate" class="form-control"></InputDate>
                        <ValidationMessage For="() => establishment_Product.ExpirationDate"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Product Images</label>
                        <InputFile class="form-control" OnChange="UploadImages"></InputFile>
                        <div class="row">
                            @if (Images != null && Images.Count() > 0)
                            {
                                int name = 1;
                                foreach(var image in Images)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="product-image" style="background: url(@image) 50% 50%; border-radius:5px;">
                                            <span class="product-image-title">@name</span>
                                        </div>
                                        <button type="button" class="btn btn-outline-danger btn-block mt-4" @onclick="()=>RemoveImage(image)">Delete</button>
                                    </div>
                                    name++;
                                }
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-success col-4" type="submit">@title Proudct</button>
                        <button class="btn btn-primary col-4" type="reset">Reset</button>
                        <NavLink href="Product" class="btn btn-secondary col-4">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<div>
    <a asp-page="Index">Back to List</a>
</div>

@code {
    public string title { get; set; } = "Create";
    [Parameter]
    public int? id { get; set; }
    private Product product { get; set; } = new();
    private List<string> Images { get; set; } = new();
    private Establishment_Product establishment_Product { get; set; } = new();
    public ICollection<ProductType> productTypes { get; set; }
    private ICollection<Establishment> establishments { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if(product.ProductImages != null)
        {
            foreach(var productImage in product.ProductImages)
            {
                Images.Add(productImage.ProductImageUrl);
            }
        }
        productTypes = await ProductTypeRepository.GetAllProductsType();
        establishments = await EstablishmentRepository.GetAllEstablishments();
        if(id != null)
        {
            title = "Edit";
            product = await ProductRepository.GetProduct(id.Value);
        }
    }
    private async Task UploadImages(InputFileChangeEventArgs e)
    {

        if(e.GetMultipleFiles().Any())
        {
            foreach(var file in e.GetMultipleFiles())
            {
                FileInfo fileInfo = new FileInfo(file.Name);
                if(fileInfo.Extension.ToLower() == ".jpg" || 
                   fileInfo.Extension.ToLower() == ".jpeg" || 
                   fileInfo.Extension.ToLower() == ".png" )
                {
                    var uploadImage = await FileUploadRepository.UploadImage("Product", file);
                    Images.Add(uploadImage);
                }
            }
        }
    }
    private void RemoveImage(string url)
    {
        var Img = Images.FirstOrDefault(x => x == url);
        Images.Remove(Img);
    }
    private void DeleteImage(string img)
    {
        FileUploadRepository.DeleteImage("Product", img);
    }
    private async Task UpdateProductImage(Product product, List<string> images)
    {
        if(product.ProductImages == null)
        {
            product.ProductImages = new List<ProductImage>();
        }
        foreach (var imageUrl in images)
        {
            if(!product.ProductImages.Any()|| product.ProductImages.Where(x => x.ProductImageUrl == imageUrl) == null)
            {
                ProductImage Image = new ProductImage()
                {
                    ProductId = product.ProductId,
                    Product = product,
                    ProductImageUrl = imageUrl
                };
                await ProductImageRepository.CreateProductImage(Image);
                product.ProductImages.Add(Image);
            }
        }
        foreach (var image in product.ProductImages)
        {
            if(images.Where(x => x == image.ProductImageUrl) == null)
            {
                ProductImageRepository.DeleteProductImageByImageId(image.ProductImageId);
                DeleteImage(image.ProductImageUrl);
            }
        }
    }
    private async void Submit()
    {
        if (title == "Create")
        {
            //product.ProductType = productTypes.FirstOrDefault(x => x.ProductTypeId == product.ProductTypeId);
            await UpdateProductImage(product, Images);
            var createdProduct = await ProductRepository.CreateProduct(product);
            establishment_Product.ProductId = createdProduct.ProductId;
            var createdEstablishment_ProductRepository = await Establishment_ProductRepository.CreateEstablishment_Product(establishment_Product);
            //establishment_Product.Establishment = establishments.FirstOrDefault(x => x.EstablishmentId == establishment_Product.EstablishmentId);
            //List<Establishment_Product> establishment_Products = new();
            //establishment_Products.Add(establishment_Product);
            //product.Establishment_Products = establishment_Products;
        }
        else
        {
            var createdProduct = await ProductRepository.UpdateProduct(product);
            await UpdateProductImage(product, Images);
        }
        NavigationManager.NavigateTo("/Product");
    }
}
