@page "/Product"
@page "/Establishment/{id:int}/Product"
@using Business.IRepository.IEstablishmentRepositories
@using Business.IRepository.IProductRepositories
@using Business.IRepository.ISharedRepository
@using DataAcesss.Data.ProductModels
@using DataAcesss.Data.EstablishmentModels
@using DataAcesss.Data.Shared
@using Server.Pages.Shared
@inject NavigationManager NavigationManager
@inject IFileUploadRepository FileUploadRepository
@inject IProductRepository ProductRepository
@inject IEstablishmentRepository EstablishmentRepository
@inject IEstablishment_ProductRepository Establishment_ProductRepository

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Products</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="Product/Create" class="btn btn-info form-control">Add New Product</NavLink>
    </div>
</div>

<div class="row">
    <div class="col-12">
        @if(products != null && products.Any())
        {
            @if(id != null)
            {
                <div class="card-deck">
                    @foreach(var estProd in Establishment_Products)
                    {
                        string image = "";
                        if(estProd.Product.ProductImages != null)
                        {
                            foreach (var productImage in estProd.Product.ProductImages)
                            {
                                image = productImage.ProductImageUrl;
                            }
                        }
                        <Item Img="@image"
                              Title="@estProd.Product.ProductName" 
                              Description="@estProd.Product.ProductDescription" 
                              RetailPrice="@estProd.RetailPrice"
                              Percentage="@estProd.Percentage" 
                              AidAmount="@estProd.AidAmount" 
                              ExpirationDate="@estProd.ExpirationDate"
                              Id="@estProd.Product.ProductId"
                              Type="Product">
                        </Item>
                    }
                </div>
            }
        }
    </div>
</div>


<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if(products != null)
                {
                    @foreach (var product in products) {
                        <tr>
                            <td>@product.ProductId</td>
                            <td>@product.ProductName</td>
                            <td>@product.ProductDescription</td>
                            <td>
                                <NavLink href="@($"Product/Edit/{product.ProductId}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>DeleteProduct(product.ProductId)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td>
                            No Data Available
                        </td>
                    </tr>  
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public int? id { get; set; } = 1;
    public ICollection<Product> products { get; set; } = new List<Product>();
    public List<Establishment_Product> Establishment_Products { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        id = 1;
        if(id != null)
        {
            Establishment establishment = await EstablishmentRepository.GetEstablishment(id.Value);
            ICollection<Establishment_Product> establishment_Products = await Establishment_ProductRepository.GetEstablishment_ProductProducts(id.Value);
            if(establishment_Products != null)
            {
                foreach(var establishment_Product in establishment_Products)
                {
                    Establishment_Products.Add(establishment_Product);
                    products.Add(establishment_Product.Product);
                }
                foreach(var product in products)
                {

                }
            }
        }
        else
        {
            products = await ProductRepository.GetAllProducts();
        }
    }
    private async Task DeleteProduct(int Id)
    {
        Product product = await ProductRepository.GetProduct(Id);
        foreach (var imageUrl in product.ProductImages)
        {
            var imageName = imageUrl.ProductImageUrl.Replace($"{NavigationManager.BaseUri}Images/", "");
            FileUploadRepository.DeleteImage("Product",imageName);
        }
        ProductRepository.DeleteProduct(Id);
        StateHasChanged();
        products = await ProductRepository.GetAllProducts();
    }
}
