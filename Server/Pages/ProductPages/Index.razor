@page "/Product"
@page "/ProductList"
@page "/ProductList/{id:int}"
@using Business.IRepository.IApplicationUserRepositories.IEmoloyeeRepositories
@using Business.IRepository.IEstablishmentRepositories
@using Business.IRepository.IOrderRepositories
@using Business.IRepository.IProductRepositories
@using Business.IRepository.ISharedRepository
@using DataAcesss.Data.CustomerModels
@using DataAcesss.Data.EmployeeModels
@using DataAcesss.Data.OrderModels
@using DataAcesss.Data.ProductModels
@using DataAcesss.Data.EstablishmentModels
@using DataAcesss.Data.Shared
@using Microsoft.AspNetCore.Identity
@using Server.Pages.Shared
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject IFileUploadRepository FileUploadRepository
@inject IProductRepository ProductRepository
@inject IEstablishmentRepository EstablishmentRepository
@inject IEstablishment_ProductRepository Establishment_ProductRepository
@inject IEmployeeRepository EmployeeRepository
@inject IOrderRepository OrderRepository
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@inject RoleManager<IdentityRole> roleManager
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (IsCustomer)
{
    <div class="row mt-4">
        <div class="col-8">
            <h4 class="card-title text-info">Products</h4>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            @if(products != null && products.Any())
            {
                @if(id != null)
                {
                    <div class="card-deck">
                        @foreach(var estProd in Establishment_Products)
                        {
                            string image = "";
                            if(estProd.Product.ProductImages != null)
                            {
                                foreach (var productImage in estProd.Product.ProductImages)
                                {
                                    image = productImage.ProductImageUrl;
                                }
                            }
                            <Item Img="@image"
                                  Order="MakeOrder"
                                  Title="@estProd.Product.ProductName" 
                                  Description="@estProd.Product.ProductDescription" 
                                  RetailPrice="@estProd.RetailPrice"
                                  Total="@estProd.CalcTotal()"
                                  Percentage="@estProd.Percentage" 
                                  AidAmount="@estProd.AidAmount" 
                                  ExpirationDate="@estProd.ExpirationDate"
                                  Id="@estProd.Product.ProductId"
                                  Type="Product">
                            </Item>
                        }
                    </div>
                }
            }
        </div>
    </div>
}
else
{
    <div class="row mt-4">
        <div class="col-8">
            <h4 class="card-title text-info">Products</h4>
        </div>
        <div class="col-3 offset-1">
            <NavLink href="Product/Create" class="btn btn-info form-control">Add New Product</NavLink>
        </div>
    </div>
    <div class="row mt-4">
        <div class="col-12">
            <table class="table table-bordered table-hover" style="overflow:auto;">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @if(products != null)
                    {
                        @foreach (var product in products) {
                            <tr>
                                <td>@product.ProductId</td>
                                <td>@product.ProductName</td>
                                <td>@product.ProductDescription</td>
                                <td>
                                    <NavLink href="@($"Product/Edit/{product.ProductId}")" class="btn btn-primary">Edit</NavLink>
                                    <button class="btn btn-danger" @onclick="()=>DeleteProduct(product.ProductId)">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td>
                                No Data Available
                            </td>
                        </tr>  
                    }
                </tbody>
            </table>
        </div>
    </div>
}


@code {
    private ClaimsPrincipal user { get; set; } = new();
    private ApplicationUser User { get; set; } = new();
    private bool IsCustomer { get; set; }

    [Parameter]
    public int? id { get; set; }
    public ICollection<Product> products { get; set; } = new List<Product>();
    public List<Establishment_Product> Establishment_Products { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        user = AuthenticationStateProvider.GetAuthenticationStateAsync().GetAwaiter().GetResult().User;
        User = await userManager.GetUserAsync(user);
        if (user.IsInRole("Customer") || !signInManager.IsSignedIn(user))
            IsCustomer = true;
        else
            IsCustomer = false;
    }
    protected override async Task OnParametersSetAsync()
    {
        if(id != null)
        {
            Establishment establishment = await EstablishmentRepository.GetEstablishment(id.Value);
            ICollection<Establishment_Product> establishment_Products = await Establishment_ProductRepository.GetEstablishment_ProductProducts(id.Value);
            if(establishment_Products != null)
            {
                foreach(var establishment_Product in establishment_Products)
                {
                    Establishment_Products.Add(establishment_Product);
                    products.Add(establishment_Product.Product);
                }
            }
        }
        else
        {
            Employee employee = await EmployeeRepository.GetemployeeById(userManager.GetUserId(user));
            Establishment establishment = employee.Establishment;
            ICollection<Establishment_Product> establishment_Products = await Establishment_ProductRepository.GetEstablishment_ProductProducts(establishment.EstablishmentId);
            if(establishment_Products != null)
            {
                foreach(var establishment_Product in establishment_Products)
                {
                    Establishment_Products.Add(establishment_Product);
                    products.Add(establishment_Product.Product);
                }
            }
            products = await ProductRepository.GetAllProducts();
        }
    }
    private async Task DeleteProduct(int Id)
    {
        Product product = await ProductRepository.GetProduct(Id);
        foreach (var imageUrl in product.ProductImages)
        {
            var imageName = imageUrl.ProductImageUrl.Replace($"{NavigationManager.BaseUri}Images/", "");
            FileUploadRepository.DeleteImage("Product",imageName);
        }
        ProductRepository.DeleteProduct(Id);
        StateHasChanged();
        products = await ProductRepository.GetAllProducts();
    }
    public void MakeOrder(int Id)
    {
        Order order = new()
        {
            Stats = "pending",
            CustomerId = User.Id,
            Quantity = 0,
            Establishment_Product = Establishment_Products.FirstOrDefault(x => x.ProductId == Id),
        };
        order.Establishment_ProductId = order.Establishment_Product.Id;
        order.Total = order.Establishment_Product.CalcTotal();
        OrderRepository.CreateOrder(order);
        NavigationManager.NavigateTo("/Orders",true);
    }
}
