@*<div class="form-group has-search">
    <span class="fa fa-search form-control-feedback"></span>
    <Input @oninput="e => Search(e.Value.ToString())" type="text" class="form-control" placeholder="@Placeholder">
    @if (Items != null && Items.Any())
    {
        <div class="form-group" style="max-height:158px; overflow:auto;">
            @foreach (var item in Items)
            {
                <a @onclick="(e => TaggleItem(item.Key))" class="form-control" id="@item.Key">@item.Value</a>
            }
        </div>
    }
</div>*@

<style>
    .vendor-check{
        border-bottom: solid #dee2e6 1px;
    }

    .vendor-check:last-child {
        border: none;
        margin-bottom: 5px !important;
    }
</style>
<div>
    <div class="input-group">
        <a @onclick="() => Search(Input)" class="btn btn-secondary">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"></path>
            </svg>
            <span class="visually-hidden">Button</span>
        </a>

        <input @oninput="e => Search(e.Value?.ToString())" value="@Input" type="text" class="form-control" placeholder="@Placeholder" aria-label="@Placeholder.Replace(' ', '-')" aria-describedby="@Placeholder.Replace(' ', '-')">

        <a @onclick="ShowAll" type="button" class="btn btn-outline-success">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16">
                <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z" />
                <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z" />
            </svg>
            <span class="visually-hidden">Show All</span>
        </a>
        <a @onclick="Reset" type="button" class="btn btn-outline-danger">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"></path>
            </svg>
            <span class="visually-hidden">Cancel</span>
        </a>
    </div>

    @if (Items != null && Items.Any())
    {
        <div class="form-group mb-1 border" style="max-height: 154px; overflow:auto;border-radius: 4px;">
            @foreach (var item in Items)
            {
                <div class="vendor-check form-check m-2 pb-1">
                    @if(SelectedItems.Keys.Contains(item.Key))
                    {
                        <input @onchange="(e => TaggleItem(item.Key))" checked type="checkbox" class="form-check-input" id="Result-@item.Key" />
                    }
                    else
                    {
                        <input @onchange="(e => TaggleItem(item.Key))" type="checkbox" class="form-check-input" id="Result-@item.Key" />
                    }
                    <label class="form-check-label w-100" for="Result-@item.Key">@item.Value</label>
                </div>
            }
        </div>
    }
</div>


@if (SelectedItems != null && SelectedItems.Any())
{
    @foreach (var selectedItem in SelectedItems)
    {
        <div class="btn-group btn-group-sm m-1">
            <a onclick="document.getElementById('@selectedItem.Value-@selectedItem.Key').scrollIntoView({behavior:'smooth'})" class="btn border">
                <span>@selectedItem.Value</span>
            </a>

            <a @onclick="e => TaggleItem(selectedItem.Key)" class="btn btn-outline-danger border">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                    <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z"></path>
                </svg>
            </a>
        </div>
    }
}

@code {
    [Parameter]
    public string Placeholder { get; set; } = "Search";

    public string Input { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> SearchItem { get; set; }
    [Parameter]
    public EventCallback ShowAllItems { get; set; }

    [Parameter]
    public EventCallback<int> Taggle { get; set; }

    [Parameter]
    public Dictionary<int, string> Items { get; set; } = new();
    [Parameter]
    public Dictionary<int, string> SelectedItems { get; set; } = new();

    public async Task Search(string? input)
    {
        if (!String.IsNullOrEmpty(input))
        {
            Input = input;
            await SearchItem.InvokeAsync(input);
        }
        else
        {
            Items = new();
        }
    }

    public async Task ShowAll()
    {
        await SearchItem.InvokeAsync("");
    }

    public async Task TaggleItem(int id)
    {
        await Taggle.InvokeAsync(id);
    }
    
    public void Reset()
    {
        Items = new(); 
        Input = "";
    }
}
